"""
EMERGENCY: –£–¥–∞–ª—è–µ—Ç –í–°–ï –ª–æ–±–±–∏ –Ω–∞ Steam –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –ª–æ–±–±–∏ –≤–∏—Å—è—Ç –ø–æ—Å–ª–µ –∫—Ä–∞—à–∞ –±–æ—Ç–∞
"""

import json
import time
import logging
import gevent
from steam.client import SteamClient
from steam.enums import EResult
from dota2.client import Dota2Client

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def destroy_all_lobbies_for_account(username: str, password: str):
    """–ó–∞—Ö–æ–¥–∏—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–æ–±–±–∏"""
    try:
        logger.info(f"[{username}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Steam...")
        
        steam = SteamClient()
        dota = Dota2Client(steam)
        
        ready = False
        
        def on_ready():
            nonlocal ready
            ready = True
            logger.info(f"[{username}] Dota 2 –≥–æ—Ç–æ–≤")
        
        dota.on('ready', on_ready)
        
        # –õ–æ–≥–∏–Ω
        result = steam.login(username=username, password=password)
        if result != EResult.OK:
            logger.error(f"[{username}] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {result}")
            return False
        
        logger.info(f"[{username}] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
        
        # –ó–∞–ø—É—Å–∫ Dota
        dota.launch()
        
        # –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        for i in range(30):
            gevent.sleep(1)
            if ready:
                break
        
        if not ready:
            logger.error(f"[{username}] Dota –Ω–µ –≥–æ—Ç–æ–≤")
            return False
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞
        gevent.sleep(5)
        
        # –£–î–ê–õ–Ø–ï–ú –õ–û–ë–ë–ò
        logger.info(f"[{username}] –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–±–±–∏...")
        try:
            dota.destroy_lobby()
            gevent.sleep(2)
            logger.info(f"[{username}] ‚úÖ –õ–æ–±–±–∏ —É–¥–∞–ª–µ–Ω–æ!")
        except Exception as e:
            logger.warning(f"[{username}] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        
        # –í—ã—Ö–æ–¥–∏–º
        try:
            dota.leave_practice_lobby()
            gevent.sleep(1)
        except:
            pass
        
        steam.disconnect()
        logger.info(f"[{username}] –û—Ç–∫–ª—é—á–∏–ª–∏—Å—å")
        return True
        
    except Exception as e:
        logger.error(f"[{username}] –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        return False

def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    try:
        with open('steam_accounts.json', 'r') as f:
            accounts = json.load(f)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å steam_accounts.json: {e}")
        return
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    logger.info("=" * 50)
    logger.info("üî• –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–• –õ–û–ë–ë–ò")
    logger.info("=" * 50)
    
    for idx, acc in enumerate(accounts, 1):
        username = acc['username']
        password = acc['password']
        
        logger.info(f"\n[{idx}/{len(accounts)}] –û–±—Ä–∞–±–æ—Ç–∫–∞ {username}...")
        
        success = destroy_all_lobbies_for_account(username, password)
        
        if success:
            logger.info(f"‚úÖ {username} - –≥–æ—Ç–æ–≤–æ")
        else:
            logger.error(f"‚ùå {username} - –æ—à–∏–±–∫–∞")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        if idx < len(accounts):
            logger.info("–ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)
    
    logger.info("\n" + "=" * 50)
    logger.info("‚úÖ –í–°–ï –ê–ö–ö–ê–£–ù–¢–´ –û–ë–†–ê–ë–û–¢–ê–ù–´!")
    logger.info("=" * 50)

if __name__ == "__main__":
    main()

